name: GitVersion - PR

env:
  BUILD_CONFIGURATION: Release
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}  
  GITVERSION_VERSION: 6.3.0

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]    
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      BRANCH_NAME: ${{ steps.variables.outputs.branch_name }}
      SEMVER: ${{ steps.variables.outputs.semver }}
      FULL_SEMVER: ${{ steps.variables.outputs.full_semver }}
      MAJOR_MINOR_PATCH: ${{ steps.variables.outputs.major_minor_patch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.0.1
        with:
          versionSpec: ${{ env.GITVERSION_VERSION }}

      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.0.1

      - name: Set output
        id: variables
        run: | 
          echo "branch_name=$(echo ${{ steps.gitversion.outputs.GitVersion_BranchName }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "semver=$(echo ${{ steps.gitversion.outputs.GitVersion_SemVer }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "full_semver=$(echo ${{ steps.gitversion.outputs.GitVersion_FullSemVer }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "major_minor_patch=$(echo ${{ steps.gitversion.outputs.GitVersion_MajorMinorPatch }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "merge=$(echo ${{ startsWith(github.ref, 'refs/heads/main') && github.event_name == 'pull_request' && github.event.action == 'closed' }})" >> $GITHUB_OUTPUT

      - name: Print variables
        run: |
          echo ${{ steps.variables.outputs.merge }}

      - name: Create tag
        if: ${{ steps.variables.outputs.merge }}
        run: |
          
          git tag ${{ steps.variables.outputs.major_minor_patch }}
          git push origin ${{ steps.variables.outputs.major_minor_patch }}
        
          $TAG=$(git ls-remote --tags origin | grep ${{ steps.variables.outputs.major_minor_patch }})
        
          if [ -n "$TAG" ]; then
            echo "Tag created successfully: $TAG"
          else
            echo "Tag have not been created"
            exit 1
          fi

#  docker:
#    runs-on: ubuntu-latest
#    permissions:
#      id-token: write
#      contents: read
#      packages: write
#      attestations: write
#    needs: [ setup ]
#    env:
#      BRANCH_NAME: ${{ needs.setup.outputs.BRANCH_NAME }}
#      SEMVER: ${{ needs.setup.outputs.SEMVER }}
#      FULL_SEMVER: ${{ needs.setup.outputs.FULL_SEMVER }}
#      MAJOR_MINOR_PATCH: ${{ needs.setup.outputs.MAJOR_MINOR_PATCH }}
#    steps: 
#      - name: Display GitVersion variables
#        shell: bash
#        run: |
#          echo "GitVersion BranchName         : $BRANCH_NAME"
#          echo "GitVersion SemVer             : $SEMVER"
#          echo "GitVersion FullSemVer         : $FULL_SEMVER"
#          echo "GitVersion MajorMinorPatch    : $MAJOR_MINOR_PATCH"#
#      - name: Checkout repository
#        uses: actions/checkout@v4#
#      - name: Log in to the Container registry
#        uses: docker/login-action@v3
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}#
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}#
#      - name: Build and push Docker image
#        id: build_docker
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          push: true
#          file: src/DockerSampleApp/Dockerfile
#          build-args: |
#            BUILD_CONFIGURATION=${{ env.BUILD_CONFIGURATION }}
#            GITVERSION=${{ env.SEMVER }}
#            MAJOR_MINOR_PATCH=${{ env.MAJOR_MINOR_PATCH }}
#          tags: |
#            ${{ env.REGISTRY }}/${{ github.actor }}/docker-walkthrough/client:${{ env.SEMVER }}
#          labels: ${{ steps.meta.outputs.labels }}#
#      - name: Generate artifact attestation
#        uses: actions/attest-build-provenance@v2
#        with:
#          subject-name: ${{ env.REGISTRY }}/${{ github.actor }}/docker-walkthrough/client
#          subject-digest: ${{ steps.build_docker.outputs.digest }}
#          push-to-registry: true#
#  helm:
#    runs-on: ubuntu-latest
#    permissions:
#      id-token: write
#      contents: read
#      packages: write
#      attestations: write
#    needs: [ setup, docker ]
#    env:
#      BRANCH_NAME: ${{ needs.setup.outputs.BRANCH_NAME }}
#      SEMVER: ${{ needs.setup.outputs.SEMVER }}
#      FULL_SEMVER: ${{ needs.setup.outputs.FULL_SEMVER }}
#      MAJOR_MINOR_PATCH: ${{ needs.setup.outputs.MAJOR_MINOR_PATCH }}
#    steps: 
#      - name: Display GitVersion variables
#        shell: bash
#        run: |
#          echo "GitVersion BranchName         : $BRANCH_NAME"
#          echo "GitVersion SemVer             : $SEMVER"
#          echo "GitVersion FullSemVer         : $FULL_SEMVER"
#          echo "GitVersion MajorMinorPatch    : $MAJOR_MINOR_PATCH"#
#      - name: Checkout repository
#        uses: actions/checkout@v4#
#      - name: Helm login
#        run: |
#          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username ${{ github.actor }} --password-stdin#
#      - name: Helm lint
#        run: |
#          helm lint ./.helm/dockerwalkthrough#
#      - name: Helm package
#        run: |
#          helm package ./.helm/dockerwalkthrough --version ${{ env.SEMVER }} --destination ./.helm/dockerwalkthrough
#      
#      - name: Helm push
#        run: |
#          helm push ./.helm/dockerwalkthrough/dockerwalkthrough-${{ env.SEMVER }}.tgz oci://${{ env.REGISTRY }}/${{ github.actor }}/charts
